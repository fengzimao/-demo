定义正则表达式有两种形式:构造函数方式: new RegExp(pattern, attributes);
例：var reg=new RegExp("a*b","g");
构造函数中的正则可以是常量字符串或一个js
变量普通方式:/pattern/attributes（/正则/属性）
pattern为一个字符串，代表的就是正则
attributes为可选字符串，包含属性g、i 和 m
g：代表可以进行全局匹配。
i：代表不区分大小写匹配。
m：代表可以进行多行匹配。
例：var reg=/a*b/g;普通方式中的正则必须是一个常量字符串
\d : 匹配任意一个数字，0~9 中的任意一个
\s : 匹配任意一个空白字符
\b : 匹配一个单词边界，不匹配任何字符
\w : 匹配任意一个字符( 字母、 数字、下划线 )
.    : 匹配任意一个字符，除了换行符( \n )
\n : 查找换行符
\u : 通常用来匹配汉字
表达式 "\d"，"\s"，"\b"，"\w"，对应的大写字母表示相反的意义 如：\D  匹配所有的非数字字符
[abc] : 查找方括号之间的任何字符。
[^abc] : 查找任何不在方括号之间的字符。
[0-9] : 查找任何从 0 至 9 的数字。
[a-z] : 查找任何从小写 a 到小写 z 的字符。
[A-Z] : 查找任何从大写 A 到大写 Z的字符。
n+ : 匹配任何包含至少一个 n 的字符串。
n? : 匹配任何包含零个或一个 n 的字符串。
n* : 匹配任何包含零个或多个 n 的字符串。
n{X} : 匹配包含 X 个 n 的序列的字符串。
n{X,Y} : 匹配包含 X 到Y 个 n 的序列的字符串。
^n : 匹配任何开头为 n 的字符串。
n$ : 匹配任何结尾为 n 的字符串。
|   : 匹配左边或者右边
\   : 转义符  特殊标点符号，在前面加 \ 后，就代表该符号本身
^ 要匹配 "^" 字符本身，请使用 \^
( ) 要匹配小括号本身，请使用 \(  和  \)其他特殊标点符号  [ ]  { }  .   ?    +   *   |
Unicode编码16进制的utf-8汉字编码:   4e00最小中文字符    9fa5最大中文字符
/^[\u4e00-\u9fa5]+$/     //常用汉字编码范围
search：检索与正则表达式相匹配的值用法：str.search(reg);  (没有返回-1)
match：返回所有正则表达式的匹配（加g）用法：str.match(reg);  （返回数组）
replace：替换与正则表达式匹配的子串用法：str.replace(reg,"");
split：将字符串匹配的部分做分割 (返回数组)用法：str.split(reg);
test：检索字符串中指定的值  返回 true 或 false reg.test(str);
exec： 检索字符串返回查找结果的第一个值 reg.exec(str);
compile： 该方法可以编辑指定的正则表达式
var reg=new RegExp("13[4-9](\\d){8}","g"); 
//重新编辑正则表达式 reg.compile("13[0-3](\\d){8}","g");